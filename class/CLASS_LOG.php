<?php
//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
// ***************************************************************
// CLASS_LOG.php
// ***************************************************************
//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/

//////////////////////////////////////////////////////////////////
// LOG クラス
// 書き込まれたデータの管理を行うクラス
//////////////////////////////////////////////////////////////////
class LOG {

    //************************************************************
    // メンバ変数
    protected $flag_exist;  // ログファイル存在フラグ
    protected $path;        // ログファイルのパス
    protected $data;        // 書き込みデータ
    protected $size;        // 書き込み総数
    protected $thread_no;   // スレッドNo
    protected $m_count;     // 内部カウンタ

    //************************************************************
    // 以下、メソッド

    //////////////////////////////////////////////////////////////
    // コンストラクタ
    //////////////////////////////////////////////////////////////
    // 引数   : $p   : 読み込むログデータのパス
    // 戻り値 : 無し
    //////////////////////////////////////////////////////////////
    public function LOG($p = NULL) {
        $this->flag_exist = false;
        $this->path = NULL;
        $this->data = NULL;
        $this->size = 0;
        $this->thread_no = 0;
        $this->m_count = 0;

        if ( $p != NULL ) {
            $this->open($p);
        }
    }

    //////////////////////////////////////////////////////////////
    // ファイル読み込み
    //////////////////////////////////////////////////////////////
    // 引数   : $p     : 読み込むログデータのパス
    // 戻り値 : bool値
    //////////////////////////////////////////////////////////////
    public function open($p) {
        // ファイルが存在するかを最初に確認
        if ( !file_exists($p) ) {
            return false;
        }

        // パスを保存
        $this->path = $p;
        // データを取得
        $this->data = file($p);
        // スレッドNoを取得
        $this->thread_no = intval($this->data[0]);
        // 書き込み数を保存
        $this->size = count($this->data) - 1;
        // ファイル存在フラグをonにする
        $this->flag_exist = true;

        // データの先頭のスレッドNoのデータを消す
        array_shift($this->data);

        return true;
    }

    //////////////////////////////////////////////////////////////
    // ファイルの有無を返す
    //////////////////////////////////////////////////////////////
    // 引数   : 無し
    // 戻り値 : $file_exist : ファイルの有無をbool値で返す
    //////////////////////////////////////////////////////////////
    public function getExist() {
        return $this->flag_exist;
    }

    //////////////////////////////////////////////////////////////
    // ファイルのサイズを返す
    //////////////////////////////////////////////////////////////
    // 引数   : 無し
    // 戻り値 : $size : 書き込みの数を返す
    //////////////////////////////////////////////////////////////
    public function getSize() {
        return $this->size;
    }

    //////////////////////////////////////////////////////////////
    // 書き込みデータの中身を返す
    //////////////////////////////////////////////////////////////
    // 引数   : 無し
    // 戻り値 : $data : 書き込みデータ
    //////////////////////////////////////////////////////////////
    public function getData() {
        return $this->data;
    }

    //////////////////////////////////////////////////////////////
    // スレッドNoを返す
    //////////////////////////////////////////////////////////////
    // 引数   : 無し
    // 戻り値 : $thread_no : スレッドNo
    //////////////////////////////////////////////////////////////
    public function getThreadNo() {
        return $this->thread_no;
    }

    //////////////////////////////////////////////////////////////
    // 指定された番号の書き込みを返す
    //////////////////////////////////////////////////////////////
    // 引数   : $no  : 書き込みの番号
    // 戻り値 : $res : 指定された書き込みのデータ
    //////////////////////////////////////////////////////////////
    public function getRes($no = NULL) {

        $flag_count = false;

        // 番号の指定が無ければ内部カウンタを代入する
        if ( $no == NULL ) {
            $no = $this->m_count;
            $flag_count = true;
        }
        
        // 指定番号が格納している範囲外ならNULLを返す
        if ($no < 0 || $this->size <= $no ) {
            return NULL;
        }

        if ( $this->data[$no] == NULL ) {
            var_dump( $no );
            die("end");
        }

        // 指定番号の書き込みデータを取り出す
        $res = array();
        list(
            $res['no'],
            $res['title'],
            $res['name'],
            $res['body'],
            $res['date'],
            $res['ip'],
            $res['id'],
            $res['show']
        ) = explode(MARK,trim($this->data[$no]));

        // 内部カウンタの値を使用していればカウンタを加算
        if ( $flag_count == true ) {
            $this->m_count++;
        }

        return $res;
    }
   
    //////////////////////////////////////////////////////////////
    // 指定された番号の書き込みを編集する
    //////////////////////////////////////////////////////////////
    // 引数 : $res : 指定された書き込みのデータ
    // 引数   : $no  : 書き込みの番号
    //////////////////////////////////////////////////////////////
    public function editRes($res, $no = NULL) {
        // 値が空ならNULLを返す
        if ( $res == NULL || $no == NULL ) {
            return;
        }

        // 保存用の形式にまとめる
        $response  = $res["no"]    . MARK;
        $response .= $res["title"] . MARK;
        $response .= $res["name"]  . MARK;
        $response .= $res["body"]  . MARK;
        $response .= $res["date"]  . MARK;
        $response .= $res["ip"]    . MARK;
        $response .= $res["id"]    . MARK;
        $response .= $res["show"];

        // データ上書き
        $this->data[$no] = $response;
        return true;
    }


    //////////////////////////////////////////////////////////////
    // 新規書き込みを追加する
    //////////////////////////////////////////////////////////////
    // 引数   : $p_name : 名前
    // 引数   : $p_body : 本文
    // 戻り値 : 無し
    //////////////////////////////////////////////////////////////
    public function addRes( $p_name, $p_body, $p_title = "" ) {

        $response = "";

        // 値設定(ここから)
        $no         = $this->getSize() + 1;                     // 書き込み番号
        $title      = $p_title;                                 // スレッドタイトル
        $name       = ( $p_name != "" ) ? htmlspecialchars($p_name) : NO_NAME;    // 名前
        $body       = htmlspecialchars($p_body);                // 本文
        $body       = str_replace("\r\n","<br />", $body);
        $body       = str_replace("\n","<br />",   $body);
        $write_date = date("Y-m-d H:i:s");                      // 書き込み日時
        $ip         = $_SERVER["REMOTE_ADDR"];                  // IP
        if ( isset($_SERVER["REMOTE_HOST"]) ) {                 // ホスト
            $host = $_SERVER["REMOTE_HOST"];
        } else {
            $host = gethostbyaddr($ip);
        }
        $id         = substr(crypt($ip,date("d")),2,10);        // ID
        $show       = FLAG_VISIBLE;                             // 表示フラグ
        // 値設定(ここまで)

        // まとめる
        $response  = $no         . MARK;
        $response .= $title      . MARK;
        $response .= $name       . MARK;
        $response .= $body       . MARK;
        $response .= $write_date . MARK;
        $response .= $host       . MARK;
        $response .= $id         . MARK;
        $response .= $show;

        // 追加
        $this->data[] = $response;
        $this->size++;
    }

    //////////////////////////////////////////////////////////////
    // データを保存する
    //////////////////////////////////////////////////////////////
    // 引数   : 無し
    // 戻り値 : 無し
    //////////////////////////////////////////////////////////////
    public function write() {

        // 書き込みデータをまとめる
        $all = $this->thread_no;
        foreach( $this->data as $value ) {
            $all .= "\n" . trim($value);
        }

        // 書き込みログ書き込み
        $fp = fopen($this->path,"w");
        flock($fp,LOCK_EX);
        fwrite($fp,$all);
        flock($fp,LOCK_UN);
        fclose($fp);
    }

    //////////////////////////////////////////////////////////////
    // スレッドタイトルを取得
    //////////////////////////////////////////////////////////////
    // 引数   : 無し
    // 戻り値 : 無し
    //////////////////////////////////////////////////////////////
    public function getTitle() {
        $res = $this->getRes(0);
        $title = $res['title'];
        return $title;
    }

}
?>